apply plugin: "java"
apply plugin: "maven"
apply plugin: "jacoco"
//apply plugin: "org.sonarqube"

group = "de.2s.sim"
version = "2.0-SNAPSHOT"

repositories {
	mavenCentral()

    maven {
        url 'https://plugins.gradle.org/m2/'
    }	
    maven {
		url 'http://nexus.measurementsolutions.de/nexus/content/repositories/snapshots/'
	}    
    maven {
		url 'http://nexus.measurementsolutions.de/nexus/content/repositories/releases/'
	}    
    maven {
		url 'http://nexus.measurementsolutions.de/nexus/content/repositories/thirdparty/'
	}    
}

sourceSets.all { set ->
    def jarTask = task("${set.name}Jar", type: Jar) {
        baseName = baseName + "-$set.name"
        from set.output
    }

    def sourcesJar =task("${set.name}Sources", type: Jar, dependsOn: classes) {
      classifier = 'sources'
      from set.output 
    }

    artifacts {
        archives jarTask sourcesJar
    }
}


sourceSets {
    api
    impl
}

dependencies {
    //classpath "org.sonarqube.gradle:gradle-sonarqube-plugin:1.0"
    //classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.0.1"
    //classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.1'

    apiCompile 'commons-codec:commons-codec:1.5'
	apiCompile 'cern:colt:1.0'
	apiCompile 'log4j:log4j:1.2.17'
	apiCompile 'org.checkerframework:checker:1.9.12'

    implCompile sourceSets.api.output
    implCompile 'commons-lang:commons-lang:2.6'
    implCompile 'jdom:jdom:0.7'
	implCompile 'log4j:log4j:1.2.17'
	implCompile 'jgraph:jgraph:5.13.0.0'
    implCompile 'jess:jess:7.0'
    implCompile 'cern:colt:1.0'
    implCompile 'org.checkerframework:checker:1.9.12'
    

    testCompile 'org.hamcrest:hamcrest-all:1.3'    
    testCompile ('junit:junit:4.11') {
    	exclude group: 'org.hamcrest'
    }
    testCompile ('org.mockito:mockito-core:2.0.2-beta') {
    	exclude group: 'org.hamcrest', module:'hamcrest-core'
    }

    testCompile sourceSets.api.output
    testCompile sourceSets.impl.output
    
    runtime configurations.apiRuntime
    runtime configurations.implRuntime
}    


jar {
    from sourceSets.api.output
    from sourceSets.impl.output
}

jacoco {
    toolVersion = "0.7.6.201602180812"
    reportsDir = file("$buildDir/customJacocoReportDir")
}

test {
	ignoreFailures = true
}

jacocoTestReport {

    classDirectories = fileTree(dir: "${buildDir}/classes",  excludes: ['**/*Test*'])
    sourceDirectories = files('src/impl/java')
    executionData = files("${buildDir}/jacoco/test.exec")
    
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/jacocoHtml"
    }
}

//sonarqube {
  //  properties {
        //property "sonar.jacoco.reportPath", "${buildDir}/jacoco/test.exec"
    //}
//}
uploadArchives {
    repositories {
        mavenDeployer {
			repository(url: "http://nexus.measurementsolutions.de/nexus/content/repositories/snapshots") {
				authentication(userName: "ems", password: "18e1042ms")
			}

           	def priority = 0

            addFilter("main") { artifact, file -> artifact.name == project.name }
            ["api", "impl"].each { type ->
                addFilter(type) { artifact, file -> artifact.name.endsWith("-$type") }
                
                // We now have to map our configurations to the correct maven scope for each pom
                
                ["compile", "runtime"].each { scope ->
                    configuration = configurations[type + scope.capitalize()]
                    ["main", type].each { pomName ->
                        pom(pomName).scopeMappings.addMapping priority, configuration, scope
	                    priority++
                    }
                }
            }

        }
    }
}
